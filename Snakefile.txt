rule all:
    input:
        "results/results_lasso_simple.txt",
        "results/results_svm_simple.txt",
        "results/results_mlpnn_simple.txt",
        "results/results_random_forest_simple.txt",
        "results/results_xgboost_simple.txt",
#        "results/results_lstm_simple.txt",
        "preprocessing_output/processed_samples_coverage.csv",
        "preprocessing_output/unprocessed_samples_term_count.csv",
        "preprocessing_output/processed_samples_term_count.csv",
        "preprocessing_output/processed_samples_simple.csv",
        "preprocessing_output/processed_samples_simple_parameter_data.csv",
        "metadata/metadata.csv"


rule preprocess_samples:
    input:
        samp="samples/simplified/",
        meta="metadata/metadata.csv",
        config="configs/preprocessing_simple.txt"
    output:
        samp_out="preprocessing_output/processed_samples_simple.csv",
        stat_out="preprocessing_output/processed_samples_coverage.csv",
        term_count_unprocessed="preprocessing_output/unprocessed_samples_term_count.csv",
        term_count_processed="preprocessing_output/processed_samples_term_count.csv",
        parameter_data="preprocessing_output/processed_samples_simple_parameter_data.csv"
    shell:
        "python scripts/term_processing.py {input.samp} {input.meta} {output.samp_out} {output.stat_out} {output.term_count_unprocessed} {output.term_count_processed} {output.parameter_data} {input.config}"

rule ml_lasso:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/lasso_simple.txt",
    output:
        results_txt = "results/results_lasso_simple.txt",
    shell:
        "python scripts/ml/lasso.py {input.samples} {input.targets} {output.results_txt} a {input.config}"

rule ml_svm:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/svm_simple.txt"
    output:
        results_txt = "results/results_svm_simple.txt",
    shell:
        "python scripts/ml/svm.py {input.samples} {input.targets} {output.results_txt} a {input.config}"

rule ml_random_forest:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/random_forest_simple.txt"
    output:
        results_txt = "results/results_random_forest_simple.txt",
    shell:
        "python scripts/ml/random_forest.py {input.samples} {input.targets} {output.results_txt} a {input.config}"

rule ml_mplnn:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/mlpnn_simple.txt"
    output:
        results_txt = "results/results_mlpnn_simple.txt",
    shell:
        "python scripts/ml/mlpnn.py {input.samples} {input.targets} {output.results_txt} a {input.config}"

rule ml_xgboost:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/xgboost_simple.txt"
    output:
        results_txt = "results/results_xgboost_simple.txt",
    shell:
        "python scripts/ml/xgboost_impl.py {input.samples} {input.targets} {output.results_txt} a {input.config}"

rule ml_LSTM:
    input:
        samples="preprocessing_output/processed_samples_simple.csv",
        targets="metadata/metadata.csv",
        config="configs/lstm_simple.txt"
    output:
        results_txt = "results/results_lstm_simple.txt",
        results_csv = "results/combined_results.csv"
    shell:
        "python scripts/ml/lstm.py {input.samples} {input.targets} {output.results_txt} {output.results_csv} {input.config}"
